#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""

import asyncio
import logging
from bot import start, about, contacts, help_command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(level=logging.INFO)

class MockMessage:
    def __init__(self):
        self.text = ""
    
    async def reply_text(self, text, parse_mode=None):
        print(f"\n{'='*50}")
        print(f"–û–¢–ü–†–ê–í–õ–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï:")
        print(f"{'='*50}")
        print(text)
        print(f"{'='*50}")
        return True

class MockUser:
    def __init__(self, user_id=123):
        self.id = user_id
        self.is_bot = False
        self.first_name = "Test"
        self.username = "testuser"

class MockUpdate:
    def __init__(self, user_id=123):
        self.message = MockMessage()
        self.effective_user = MockUser(user_id)

class MockContext:
    pass

async def test_all_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ Telegram-–±–æ—Ç–∞...")
    
    context = MockContext()
    
    # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start:")
    update = MockUpdate(1)
    try:
        await start(update, context)
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
    
    # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /about
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /about:")
    update = MockUpdate(2)
    try:
        await about(update, context)
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /about —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /about: {e}")
    
    # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /contacts
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /contacts:")
    update = MockUpdate(3)
    try:
        await contacts(update, context)
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /contacts —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /contacts: {e}")
    
    # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /help:")
    update = MockUpdate(4)
    try:
        await help_command(update, context)
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /help —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help: {e}")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_all_commands())
